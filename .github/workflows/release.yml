name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Yarn
        run: corepack enable

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build packages
        run: yarn build

      - name: Create Release Pull Request or Version Packages
        id: changesets
        uses: changesets/action@v1
        with:
          # Only handle versioning, no publishing since packages are private
          version: yarn changeset:version
          commit: "chore: version packages"
          title: "chore: version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git Tags and Releases
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check for version changes and create tags
          changed_packages=$(git diff HEAD~1 --name-only | grep 'package\.json$' || true)
          
          if [ ! -z "$changed_packages" ]; then
            for package_file in $changed_packages; do
              if [[ "$package_file" == packages/*/package.json ]]; then
                package_dir=$(dirname "$package_file")
                name=$(node -p "require('./$package_file').name")
                version=$(node -p "require('./$package_file').version")
                
                if [ "$version" != "0.0.0" ]; then
                  tag_name="${name}@${version}"
                  echo "Creating tag: $tag_name"
                  
                  # Create tag
                  git tag "$tag_name"
                  
                  # Create GitHub release
                  gh release create "$tag_name" \
                    --title "Release $tag_name" \
                    --notes "Release of $name version $version" \
                    --target main
                fi
              fi
            done
            
            # Push tags
            git push origin --tags
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
